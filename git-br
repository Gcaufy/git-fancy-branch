#!/bin/bash
#
# Git Fancy Branch 
# Quick switch/delete local git branches


VERSION=0.0.2

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_delete="off"
_arg_yes="off"
_arg_delete_all_merged="off"
_arg_show_remote="off" # show remote branch, like git branch -r

## fzf check, if not installed. exist
if [ -z "$FZF_COMMAND" ]; then FZF_COMMAND="fzf"; fi

if ! (command -v "$FZF_COMMAND" >/dev/null 2>&1); then
	echo ""
	echo "Please install fzf first. Check this link to install fzf: https://github.com/junegunn/fzf#installation"
	echo ""
	exit 2
fi

## List all branches
function list_branches() {
	local branch='%(refname:short)'
	local spacer=' '

	local format="\
		%(HEAD) $branch|  |%(committerdate:relative)|%(authorname)|%(upstream:track)|%(contents:subject) $spacer"
	local refs="refs/heads/"

	if [ "$_arg_show_remote" == "on" ]; then
		refs="refs/remotes"
	fi
	git for-each-ref \
		--color=always \
		--sort=-committerdate \
		$refs \
		--format="$format" |
		column -ts '|'
}

# Checkout branch via FZF
function checkout_branch() {
	local select=$(list_branches | $FZF_COMMAND --no-preview --no-sort --no-multi --no-select-1 --prompt="Please select a branch: " | awk '{print $1}')

	if [ "$select" == "*" ]; then
		echo "Already on this branch"
	else
		if [ "$select"x != "x" ]; then
			if [ "$_arg_show_remote" == "on" ]; then
				git checkout ${select#origin/} # remote branch start with origin/xxx
			else
				git checkout $select
			fi
		fi
	fi
}

# Delete all merged branches
function delete_all_merged() {
	git branch --merged | grep -v master | xargs git branch -d
}

# Delete merge branches
# Only fully merged branches can be deleted
function delete_branches() {
	list_branches | \
		$FZF_COMMAND --no-preview --no-sort --multi --no-select-1 --prompt="Use [tab] to pickup the branches you want to delete: " | \
		awk '{print $1}' | \
		grep -v '*' | \
		xargs git branch -d
}

function die() {
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}

function begins_with_short_option() {
	local first_option all_short_options='dyvh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}


function print_help() {
	printf '%s\n' "Git branch enhancement"
	printf 'Usage: %s \n' "$0"
	printf '\t%s\n' "-r, --remote: show remote branch"
	printf '\t%s\n' "-d, --delete: Delete selected branches. Only fully merged branches will be deleted"
	printf '\t%s\n' "--delete-all-merged: Delete all merged branches"
	printf '\t%s\n' "-v, --version: Print version"
	printf '\t%s\n' "-h, --help: Print help"
	printf '\n%s\n' "Quick switch/delete local branches in command line"
}

function parse_commandline() {
	while test $# -gt 0; do
		_key="$1"
		case "$_key" in
		--delete-all-merged)
			_arg_delete_all_merged="on"
			;;
		-d | --delete)
			_arg_delete="on"
			;;
		-d*)
			_arg_delete="on"
			_next="${_key##-d}"
			if test -n "$_next" -a "$_next" != "$_key"; then
				{ begins_with_short_option "$_next" && shift && set -- "-d" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
			fi
			;;
		-y | --yes)
			_arg_yes="on"
			;;
		-y*)
			_arg_yes="on"
			_next="${_key##-y}"
			if test -n "$_next" -a "$_next" != "$_key"; then
				{ begins_with_short_option "$_next" && shift && set -- "-y" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
			fi
			;;
		-v | --version)
			printf '%s %s\n\n%s\n' "" "$VERSION" ''
			exit 0
			;;
		-v*)
			printf '%s %s\n\n%s\n' "" "$VERSION" ''
			exit 0
			;;
		-r | --remote)
			_arg_show_remote="on"
			;;
		-h | --help)
			print_help
			exit 0
			;;
		-h*)
			print_help
			exit 0
			;;
		*)
			_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
			;;
		esac
		shift
	done
}

parse_commandline "$@"

if [ "$_arg_delete_all_merged" == "on" ]; then
	delete_all_merged
elif [ "$_arg_delete" == "on" ]; then
	delete_branches
else
	checkout_branch
fi

